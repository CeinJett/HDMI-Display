#include <Arduino.h>
#include <Wire.h>
#include "config.h"
#include "HDMI-Display.h"

// for 480x272 display
const uint8_t PROGMEM eepromdata_480x272[128] =
{
  0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x5C,0x34,0x01,0x00,0x01,0x00,0x00,0x00,
  0x01,0x19,0x01,0x03,0x81,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
  0x01,0x01,0x01,0x01,0x01,0x01,0xC4,0x09,0xE0,0x33,0x10,0x10,0x14,0x10,0x08,0x05,
  0x4A,0x00,0xE0,0x10,0x11,0x00,0x00,0x18,0x00,0x00,0x00,0xFC,0x00,0x48,0x44,0x4D,
  0x49,0x20,0x44,0x49,0x53,0x50,0x4C,0x41,0x59,0x0A,0x00,0x00,0x00,0x10,0x00,0x01,
  0x00,0x0A,0x00,0x0A,0x00,0x0A,0x0A,0x0A,0x0A,0x0A,0x20,0x0A,0x00,0x00,0x00,0x10,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38
};

// for 800x480 display with 720x480 (480p) fallback
const uint8_t PROGMEM eepromdata_720x480[128] =
{
  0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x5C,0x34,0x01,0x00,0x01,0x00,0x00,0x00,
  0x01,0x19,0x01,0x03,0x80,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
  0x01,0x01,0x01,0x01,0x01,0x01,0x80,0x0C,0x20,0x80,0x30,0xE0,0x2D,0x10,0x28,0x30,
  0xD3,0x00,0x20,0xE0,0x31,0x00,0x00,0x18,0x00,0x00,0x00,0xFC,0x00,0x48,0x44,0x4D,
  0x49,0x20,0x44,0x49,0x53,0x50,0x4C,0x41,0x59,0x0A,0x8C,0x0A,0xD0,0x6C,0x20,0xE0,
  0x1E,0x10,0x10,0x3E,0x96,0x00,0xD0,0xE0,0x21,0x00,0x00,0x18,0x00,0x00,0x00,0x10,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x94
};

// for 800x480 display
const uint8_t PROGMEM eepromdata_800x480[128] =
{
  0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x5C,0x34,0x01,0x00,0x01,0x00,0x00,0x00,
  0x01,0x19,0x01,0x03,0x80,0x00,0x00,0x00,0x0A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
  0x01,0x01,0x01,0x01,0x01,0x01,0x80,0x0C,0x20,0x80,0x30,0xE0,0x2D,0x10,0x28,0x30,
  0xD3,0x00,0x20,0xE0,0x31,0x00,0x00,0x18,0x00,0x00,0x00,0xFC,0x00,0x48,0x44,0x4D,
  0x49,0x20,0x44,0x49,0x53,0x50,0x4C,0x41,0x59,0x0A,0x00,0x00,0x00,0x10,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x51
};

EDID::EDID()
{
}

uint8_t EDID::readByte(uint16_t addr)
{
  uint8_t data;
  
  Wire.beginTransmission(EEPROMADDR);
  Wire.write(addr);
  Wire.endTransmission();
  Wire.requestFrom(EEPROMADDR, 1);
  while(!Wire.available())
    ;
  data = Wire.read();
  return data;
}

void EDID::writeByte(uint16_t addr, uint8_t data)
{
  Wire.beginTransmission(EEPROMADDR);
  Wire.write((uint8_t)addr);
  Wire.write((uint8_t)data);
  Wire.endTransmission();
}

bool EDID::writeData(uint8_t *eepromdata, uint8_t length, bool fromProgMem)
{
  bool err = true;
  
  Serial.println(F("I2C EEPROM WRITER")); 
  
  digitalWrite(LED_1, LOW);
  digitalWrite(LED_2, HIGH);

  Wire.begin();
  Serial.println(F("Writing..."));
  for(uint16_t addr = 0; addr < EEPROMSIZE; addr++)
  {
    byte b;

    if(addr < length)
    {
      if(fromProgMem)
        b = pgm_read_byte(eepromdata + addr);
      else
        b = eepromdata[addr];
    }
    else
      b = 0xFF;

    writeByte(addr, b);
    delay(5);
  }
  Serial.println(F("Done."));

  Serial.println(F("Verifying..."));
  for(uint16_t addr = 0; addr < EEPROMSIZE; addr++)
  {
    byte b, d;
    
    if (addr < length)
    {
      if(fromProgMem)
        b = pgm_read_byte(eepromdata + addr);
      else
        b = eepromdata[addr];
    }
    else
      b = 0xFF;
 
    d = readByte(addr);
    
    if (b != d)
    {
      Serial.print(F("Verification failed at 0x")); Serial.println(addr);
      err = false;
      break;
    }
  }
  Serial.println(F("Done."));
  
  digitalWrite(LED_1, HIGH);
  digitalWrite(LED_2, HIGH);
  return err;
}

bool EDID::writeEDID(uint8_t type)
{
  switch(type)
  {
    case EDID_480x272:
      return writeData((uint8_t*)eepromdata_480x272, sizeof(eepromdata_480x272), true);
    
    case EDID_720x480:
      return writeData((uint8_t*)eepromdata_720x480, sizeof(eepromdata_720x480), true);

    case EDID_800x480:
      return writeData((uint8_t*)eepromdata_800x480, sizeof(eepromdata_800x480), true);
      
    default:
      return false;
  }
}

/*bool EDID::writeFromRam() // test
{
  char test[] = "0123456789";
  return writeData((uint8_t*)test, sizeof(test), false);
}*/

